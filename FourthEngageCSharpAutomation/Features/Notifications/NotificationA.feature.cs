// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FourthEngageCSharpAutomation.Features.Notifications
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Engage -- Notifications")]
    public partial class Engage_NotificationsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "NotificationA.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Engage -- Notifications", "    As an Engage user\n    I want Notifications functionality\n    So that I can check my notification alerts properly", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
    #line 9
        testRunner.Given("I log in with valid credentials", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify generation of new notification")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void VerifyGenerationOfNewNotification()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify generation of new notification", new string[]
                {
                        "smoke"});
#line 12
    this.ScenarioSetup(scenarioInfo);
#line 8
    this.FeatureBackground();
#line 14
       testRunner.Given("I note the current notification count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
       testRunner.And("I add a new post Text Notification--1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
       testRunner.And("I do a @mention for approver testington", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
       testRunner.When("I click the Submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
          testRunner.Then("I see that count of unread notifications has increased by 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify decrement of notification count")]
        public virtual void VerifyDecrementOfNotificationCount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify decrement of notification count", ((string[])(null)));
#line 20
    this.ScenarioSetup(scenarioInfo);
#line 8
    this.FeatureBackground();
#line 22
        testRunner.Given("I add a new post Text Notification--2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
        testRunner.And("I do a @mention for approver testington", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
        testRunner.And("I click the Submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
        testRunner.And("I note the current notification count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
        testRunner.When("I click the \"Notifications\" side panel button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
        testRunner.And("I click on Notification for feed posted a few seconds ago", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
        testRunner.Then("I see that count of unread notifications has decreased by 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
